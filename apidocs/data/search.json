{"list":[{"title":"LayersArray#shaderType","link":"<a href=\"LayersArray.html#shaderType\">shaderType</a>"},{"title":"RGBAColor#euclideanDistance","link":"<a href=\"RGBAColor.html#euclideanDistance\">euclideanDistance</a>","description":"Checks how close two colors are. Closest is `0`."},{"title":"SignedNumber","link":"<a href=\"global.html#SignedNumber\">SignedNumber</a>","description":"A numeric value that may be negative or positive."},{"title":"add","link":"<a href=\"global.html#add\">add</a>","description":"Add a `RenderPass` from the `RenderPasses` list"},{"title":"addAudio","link":"<a href=\"global.html#addAudio\">addAudio</a>"},{"title":"addBindingTexture","link":"<a href=\"global.html#addBindingTexture\">addBindingTexture</a>"},{"title":"addEventListener","link":"<a href=\"global.html#addEventListener\">addEventListener</a>","description":"Listen for an event dispatched from WGSL code"},{"title":"addLayers","link":"<a href=\"global.html#addLayers\">addLayers</a>"},{"title":"addPoint","link":"<a href=\"global.html#addPoint\">addPoint</a>","description":"Adds two triangles as a quad called Point"},{"title":"addRenderPass","link":"<a href=\"global.html#addRenderPass\">addRenderPass</a>","description":"Mainly to be used with RenderPasses.js"},{"title":"addSampler","link":"<a href=\"global.html#addSampler\">addSampler</a>"},{"title":"addStorage","link":"<a href=\"global.html#addStorage\">addStorage</a>"},{"title":"addStorageMap","link":"<a href=\"global.html#addStorageMap\">addStorageMap</a>"},{"title":"addTexture2d","link":"<a href=\"global.html#addTexture2d\">addTexture2d</a>"},{"title":"addTextureImage","link":"<a href=\"global.html#addTextureImage\">addTextureImage</a>"},{"title":"addTextureVideo","link":"<a href=\"global.html#addTextureVideo\">addTextureVideo</a>"},{"title":"addTextureWebcam","link":"<a href=\"global.html#addTextureWebcam\">addTextureWebcam</a>"},{"title":"addUniform","link":"<a href=\"global.html#addUniform\">addUniform</a>"},{"title":"bloom","link":"<a href=\"global.html#bloom\">bloom</a>","description":"Bloom postprocessing. Increases brightness of already bright areas to create a haze effect."},{"title":"blur","link":"<a href=\"global.html#blur\">blur</a>","description":"Blur postprocessing. Softens an image by creating multiple samples."},{"title":"chromaticAberration","link":"<a href=\"global.html#chromaticAberration\">chromaticAberration</a>","description":"Chromatic Aberration postprocessing. Color bleeds simulating a lens effect without distortion."},{"title":"color","link":"<a href=\"global.html#color\">color</a>","description":"Color postprocessing"},{"title":"createScreen","link":"<a href=\"global.html#createScreen\">createScreen</a>","description":"Adds two triangles called points per number of columns and rows"},{"title":"delta","link":"<a href=\"global.html#delta\">delta</a>","description":"Gets the last delta value, it does not calculate the delta, use `getDelta()`"},{"title":"filmgrain","link":"<a href=\"global.html#filmgrain\">filmgrain</a>","description":"Film grain postprocessing. White noise added to the output to simulate film irregularities."},{"title":"getDelta","link":"<a href=\"global.html#getDelta\">getDelta</a>","description":"Calculate time since last frame\rIt also calculates `time`"},{"title":"grayscale","link":"<a href=\"global.html#grayscale\">grayscale</a>","description":"Grayscale postprocessing. Takes the brightness of an image and returns it; that makes the grayscale result."},{"title":"init","link":"<a href=\"global.html#init\">init</a>","description":"One time function to call to initialize the shaders."},{"title":"isArray","link":"<a href=\"global.html#isArray\">isArray</a>","description":"Check if string has 'array' in it"},{"title":"lensDistortion","link":"<a href=\"global.html#lensDistortion\">lensDistortion</a>","description":"Lens Distortion postprocessing. A fisheye distortion with chromatic aberration."},{"title":"module.exports","link":"<a href=\"module.exports.html\">exports</a>"},{"title":"module.exports","link":"<a href=\"module.exports.html\">exports</a>"},{"title":"module.exports#module.exports","link":"<a href=\"module.exports_module.exports.html\">exports</a>","description":"Records video from a Canvas to a file."},{"title":"module.exports#module.exports","link":"<a href=\"module.exports_module.exports.html\">exports</a>","description":"A collection of Vertex, Compute and Fragment shaders that represent a RenderPass.\rThis is useful for PostProcessing."},{"title":"module.exports#module.exports","link":"<a href=\"module.exports_module.exports.html\">exports</a>","description":"Along with the vertexArray it calculates some info like offsets required for the pipeline."},{"title":"pixelate","link":"<a href=\"global.html#pixelate\">pixelate</a>","description":"Pixelate postprocessing. It reduces the amount of pixels in the output preserving the scale."},{"title":"renderPass.computeBindGroup","link":"<a href=\"renderPass.html#.computeBindGroup\">computeBindGroup</a>"},{"title":"setAudio","link":"<a href=\"global.html#setAudio\">setAudio</a>","description":"Assigns an audio FrequencyData to a StorageMap"},{"title":"setBindingTexture","link":"<a href=\"global.html#setBindingTexture\">setBindingTexture</a>","description":"Sets a texture to the compute and fragment shader, in the compute you can\rwrite to the texture, and in the fragment you can read the texture, so is\ra one way communication method."},{"title":"setLayers","link":"<a href=\"global.html#setLayers\">setLayers</a>","description":"Layers of data made of `vec4f`"},{"title":"setMeshDensity","link":"<a href=\"global.html#setMeshDensity\">setMeshDensity</a>","description":"Establishes the density of the base mesh, by default 1x1, meaning two triangles.\rThe final number of triangles is `numColumns` * `numRows` * `2` ( 2 being the triangles )"},{"title":"setSampler","link":"<a href=\"global.html#setSampler\">setSampler</a>","description":"Creates a `sampler` to be sent to the shaders."},{"title":"setStorage","link":"<a href=\"global.html#setStorage\">setStorage</a>","description":"Creates a persistent memory buffer across every frame call."},{"title":"setStorageMap","link":"<a href=\"global.html#setStorageMap\">setStorageMap</a>","description":"Creates a persistent memory buffer across every frame call that can be updated."},{"title":"setTexture2d","link":"<a href=\"global.html#setTexture2d\">setTexture2d</a>","description":"Create a `texture_2d` in the shaders."},{"title":"setTextureImage","link":"<a href=\"global.html#setTextureImage\">setTextureImage</a>","description":"Load an image as texture_2d"},{"title":"setTextureImageArray","link":"<a href=\"global.html#setTextureImageArray\">setTextureImageArray</a>","description":"Load images as texture_2d_array"},{"title":"setTextureString","link":"<a href=\"global.html#setTextureString\">setTextureString</a>","description":"Loads a text string as a texture.\rUsing an Atlas or a Spritesheet with UTF-16 chars (`path`) it will create a new texture\rthat contains only the `text` characters.\rCharacters in the atlas `path` must be in order of the UTF-16 chars.\rIt can have missing characters at the end or at the start, so the `offset` is added to take account for those chars.\rFor example, `A` is 65, but if one character is removed before the letter `A`, then offset is -1"},{"title":"setTextureVideo","link":"<a href=\"global.html#setTextureVideo\">setTextureVideo</a>","description":"Load an video as texture2d"},{"title":"setTextureWebcam","link":"<a href=\"global.html#setTextureWebcam\">setTextureWebcam</a>","description":"Load webcam as texture2d"},{"title":"setUniform","link":"<a href=\"global.html#setUniform\">setUniform</a>","description":"Set a param as uniform to send to all shaders.\rA Uniform is a value that can only be changed\rfrom the outside, and unless changed it remains\rconsistent."},{"title":"sprite","link":"<a href=\"global.html#sprite\">sprite</a>"},{"title":"strToCodes","link":"<a href=\"global.html#strToCodes\">strToCodes</a>","description":"Returns UTF-16 array of each char"},{"title":"strToImage","link":"<a href=\"global.html#strToImage\">strToImage</a>","description":"Expects an atlas/spritesheed with chars in UTF-16 order.\nThis means `A` is expected at index `65`; if not there,\nuse offset to move backwards (negative) or forward (positive)"},{"title":"time","link":"<a href=\"global.html#time\">time</a>","description":"Gets the current time, it does not calculate the time, it's calcualted\r when `getDelta()` is called."},{"title":"updateStorageMap","link":"<a href=\"global.html#updateStorageMap\">updateStorageMap</a>"},{"title":"updateTextureImage","link":"<a href=\"global.html#updateTextureImage\">updateTextureImage</a>"},{"title":"updateUniform","link":"<a href=\"global.html#updateUniform\">updateUniform</a>"},{"title":"updateUniforms","link":"<a href=\"global.html#updateUniforms\">updateUniforms</a>","description":"Update a list of uniforms"},{"title":"waves","link":"<a href=\"global.html#waves\">waves</a>","description":"Waves postprocessing. Distorts the image with noise to create a water like effect."}]}