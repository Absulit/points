import color from"./core/RenderPasses/color/index.js";import grayscale from"./core/RenderPasses/grayscale/index.js";import chromaticAberration from"./core/RenderPasses/chromaticAberration/index.js";import pixelate from"./core/RenderPasses/pixelate/index.js";import lensDistortion from"./core/RenderPasses/lensDistortion/index.js";import filmgrain from"./core/RenderPasses/filmgrain/index.js";import bloom from"./core/RenderPasses/bloom/index.js";import blur from"./core/RenderPasses/blur/index.js";import waves from"./core/RenderPasses/waves/index.js";import RenderPass from"./RenderPass.js";class RenderPasses{static COLOR=1;static GRAYSCALE=2;static CHROMATIC_ABERRATION=3;static PIXELATE=4;static LENS_DISTORTION=5;static FILM_GRAIN=6;static BLOOM=7;static BLUR=8;static WAVES=9;static #LIST={1:color,2:grayscale,3:chromaticAberration,4:pixelate,5:lensDistortion,6:filmgrain,7:bloom,8:blur,9:waves};static async add(points,renderPassId,params){if(points.renderPasses?.length){throw"`addPostRenderPass` should be called prior `Points.init()`"}let shaders=this.#LIST[renderPassId];let renderPass=new RenderPass(shaders.vertexShader,shaders.fragmentShader,shaders.computeShader);renderPass.internal=true;points.addRenderPass(renderPass);await shaders.init(points,params)}static async color(points,r,g,b,a,blendAmount){return await RenderPasses.add(points,RenderPasses.COLOR,{color:[r,g,b,a],blendAmount})}static async grayscale(points){return await RenderPasses.add(points,RenderPasses.GRAYSCALE)}static async chromaticAberration(points,distance){return await RenderPasses.add(points,RenderPasses.CHROMATIC_ABERRATION,{distance})}static async pixelate(points,width,height){return await RenderPasses.add(points,RenderPasses.PIXELATE,{pixelsWidth:width,pixelsHeight:height})}static async lensDistortion(points,amount,distance){return await RenderPasses.add(points,RenderPasses.LENS_DISTORTION,{amount,distance})}static async filmgrain(points){return await RenderPasses.add(points,RenderPasses.FILM_GRAIN)}static async bloom(points,amount){return await RenderPasses.add(points,RenderPasses.BLOOM,{amount})}static async blur(points,resolutionX,resolutionY,directionX,directionY,radians){return await RenderPasses.add(points,RenderPasses.BLUR,{resolution:[resolutionX,resolutionY],direction:[directionX,directionY],radians})}static async waves(points,scale,intensity){return await RenderPasses.add(points,RenderPasses.WAVES,{scale,intensity})}}export{RenderPasses as default};
